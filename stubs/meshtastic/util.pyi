from _typeshed import Incomplete
from google.protobuf.message import Message as Message
from meshtastic.supported_device import supported_devices as supported_devices
from meshtastic.version import get_active_version as get_active_version
from queue import Queue
from typing import Any, NoReturn

blacklistVids: dict
whitelistVids: Incomplete

def quoteBooleans(a_string: str) -> str: ...
def genPSK256() -> bytes: ...
def fromPSK(valstr: str) -> Any: ...
def fromStr(valstr: str) -> Any: ...
def toStr(raw_value): ...
def pskToString(psk: bytes) -> str: ...
def stripnl(s) -> str: ...
def fixme(message: str) -> None: ...
def catchAndIgnore(reason: str, closure) -> None: ...
def findPorts(eliminate_duplicates: bool = False) -> list[str]: ...

class dotdict(dict):
    __getattr__: Incomplete
    __setattr__: Incomplete
    __delattr__: Incomplete

class Timeout:
    expireTime: int | float
    sleepInterval: float
    expireTimeout: int
    def __init__(self, maxSecs: int = 20) -> None: ...
    def reset(self) -> None: ...
    def waitForSet(self, target, attrs=()) -> bool: ...
    def waitForAckNak(self, acknowledgment, attrs=('receivedAck', 'receivedNak', 'receivedImplAck')) -> bool: ...
    def waitForTraceRoute(self, waitFactor, acknowledgment, attr: str = 'receivedTraceRoute') -> bool: ...
    def waitForTelemetry(self, acknowledgment) -> bool: ...
    def waitForPosition(self, acknowledgment) -> bool: ...
    def waitForWaypoint(self, acknowledgment) -> bool: ...

class Acknowledgment:
    receivedAck: bool
    receivedNak: bool
    receivedImplAck: bool
    receivedTraceRoute: bool
    receivedTelemetry: bool
    receivedPosition: bool
    receivedWaypoint: bool
    def __init__(self) -> None: ...
    def reset(self) -> None: ...

class DeferredExecution:
    queue: Queue
    thread: Incomplete
    def __init__(self, name) -> None: ...
    def queueWork(self, runnable) -> None: ...

def our_exit(message, return_value: int = 1) -> NoReturn: ...
def support_info() -> None: ...
def remove_keys_from_dict(keys: tuple | list | set, adict: dict) -> dict: ...
def hexstr(barray: bytes) -> str: ...
def ipstr(barray: bytes) -> str: ...
def readnet_u16(p, offset: int) -> int: ...
def convert_mac_addr(val: str) -> str | bytes: ...
def snake_to_camel(a_string: str) -> str: ...
def camel_to_snake(a_string: str) -> str: ...
def detect_supported_devices() -> set: ...
def detect_windows_needs_driver(sd, print_reason: bool = False) -> bool: ...
def eliminate_duplicate_port(ports: list) -> list: ...
def is_windows11() -> bool: ...
def get_unique_vendor_ids() -> set[str]: ...
def get_devices_with_vendor_id(vid: str) -> set: ...
def active_ports_on_supported_devices(sds, eliminate_duplicates: bool = False) -> set[str]: ...
def detect_windows_port(sd) -> set[str]: ...
def check_if_newer_version() -> str | None: ...
def message_to_json(message: Message, multiline: bool = False) -> str: ...
