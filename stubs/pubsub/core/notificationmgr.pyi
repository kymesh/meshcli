from .listener import Listener as Listener
from .topicobj import Topic as Topic
from typing import Mapping

class INotificationHandler:
    def notifySubscribe(self, pubListener: Listener, topicObj: Topic, newSub: bool): ...
    def notifyUnsubscribe(self, pubListener: Listener, topicObj: Topic): ...
    def notifyDeadListener(self, pubListener: Listener, topicObj: Topic): ...
    def notifySend(self, stage: str, topicObj: Topic, pubListener: Listener = None): ...
    def notifyNewTopic(self, topicObj: Topic, description: str, required: list[str], argsDocs: Mapping[str, str]): ...
    def notifyDelTopic(self, topicName: str): ...

class NotificationMgr:
    def __init__(self, notificationHandler: INotificationHandler = None) -> None: ...
    def addHandler(self, handler: INotificationHandler): ...
    def getHandlers(self) -> list[INotificationHandler]: ...
    def clearHandlers(self) -> None: ...
    def notifySubscribe(self, *args, **kwargs) -> None: ...
    def notifyUnsubscribe(self, *args, **kwargs) -> None: ...
    def notifySend(self, *args, **kwargs) -> None: ...
    def notifyNewTopic(self, *args, **kwargs) -> None: ...
    def notifyDelTopic(self, *args, **kwargs) -> None: ...
    def notifyDeadListener(self, *args, **kwargs) -> None: ...
    def getFlagStates(self) -> Mapping[str, bool]: ...
    def setFlagStates(self, subscribe: bool = None, unsubscribe: bool = None, deadListener: bool = None, sendMessage: bool = None, newTopic: bool = None, delTopic: bool = None, all: bool = None): ...
