from .listener import IListenerExcHandler as IListenerExcHandler, Listener as Listener, UserListener as UserListener
from .notificationmgr import INotificationHandler as INotificationHandler
from .topicmgr import TopicManager as TopicManager, TreeConfig as TreeConfig
from typing import Callable, Mapping

TopicFilter = Callable[[str], bool]
ListenerFilter = Callable[[Listener], bool]

class Publisher:
    def __init__(self, treeConfig: TreeConfig = None) -> None: ...
    def getTopicMgr(self) -> TopicManager: ...
    def getListenerExcHandler(self) -> IListenerExcHandler: ...
    def setListenerExcHandler(self, handler: IListenerExcHandler): ...
    def addNotificationHandler(self, handler: INotificationHandler): ...
    def clearNotificationHandlers(self) -> None: ...
    def setNotificationFlags(self, **kwargs: Mapping[str, bool | None]): ...
    def getNotificationFlags(self) -> Mapping[str, bool]: ...
    def setTopicUnspecifiedFatal(self, newVal: bool = True, checkExisting: bool = True) -> bool: ...
    def subscribe(self, listener: UserListener, topicName: str, **curriedArgs) -> Listener: ...
    def unsubscribe(self, listener: UserListener, topicName: str): ...
    def unsubAll(self, topicName: str = None, listenerFilter: ListenerFilter = None, topicFilter: str | TopicFilter = None) -> list[Listener]: ...
    def sendMessage(self, topicName: str, **msgData): ...
