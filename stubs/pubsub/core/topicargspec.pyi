from .annotations import annotationType as annotationType
from .listener import UserListener as UserListener
from .topicexc import MessageDataSpecError as MessageDataSpecError
from .topicutils import WeakNone as WeakNone, stringize as stringize
from _typeshed import Incomplete
from typing import Any, Mapping, Sequence as Seq

ArgsDocs = dict[str, str]
MsgData = Mapping[str, Any]

def verifyArgsDifferent(allArgs, allParentArgs, topicName) -> None: ...
def verifySubset(all, sub, topicName, extraMsg: str = '') -> None: ...
def topicArgsFromCallable(_callable: UserListener, ignoreArgs: Seq[str] = ()) -> tuple[ArgsDocs, list[str]]: ...

class ArgSpecGiven:
    SPEC_GIVEN_NONE: int
    SPEC_GIVEN_ALL: int
    reqdArgs: Incomplete
    argsSpecType: Incomplete
    argsDocs: Incomplete
    def __init__(self, argsDocs: ArgsDocs = None, reqdArgs: Seq[str] = None) -> None: ...
    def setAll(self, allArgsDocs: ArgsDocs, reqdArgs: Seq[str] = None): ...
    def isComplete(self) -> bool: ...
    def getOptional(self) -> list[str]: ...

class SenderMissingReqdMsgDataError(RuntimeError):
    def __init__(self, topicName: str, argNames: Seq[str], missing: Seq[str]) -> None: ...

class SenderUnknownMsgDataError(RuntimeError):
    def __init__(self, topicName: str, argNames: Seq[str], extra: Seq[str]) -> None: ...

class ArgsInfo: ...

class ArgsInfo:
    SPEC_MISSING: int
    SPEC_COMPLETE: int
    topicNameTuple: Incomplete
    allOptional: Incomplete
    allDocs: Incomplete
    allRequired: Incomplete
    argsSpecType: Incomplete
    parentAI: Incomplete
    childrenAI: Incomplete
    argsAddedToParent: Incomplete
    def __init__(self, topicNameTuple: Seq[str], specGiven: ArgSpecGiven, parentArgsInfo: ArgsInfo) -> None: ...
    def isComplete(self) -> bool: ...
    def getArgs(self) -> list[str]: ...
    def numArgs(self) -> int: ...
    def getReqdArgs(self) -> list[str]: ...
    def getOptArgs(self) -> list[str]: ...
    def getArgsDocs(self) -> ArgsDocs: ...
    def setArgsDocs(self, docs: ArgsDocs): ...
    def check(self, msgData: MsgData): ...
    def filterArgs(self, msgData: MsgData) -> MsgData: ...
    def hasSameArgs(self, *argNames: Seq[str]) -> bool: ...
    def hasParent(self, argsInfo: ArgsInfo) -> bool: ...
    def getCompleteAI(self) -> ArgsInfo: ...
    def updateAllArgsFinal(self, topicDefn: ArgSpecGiven): ...
