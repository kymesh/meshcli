from .topicargspec import ArgSpecGiven as ArgSpecGiven, ArgsDocs as ArgsDocs, topicArgsFromCallable as topicArgsFromCallable
from .topicexc import UnrecognizedSourceFormatError as UnrecognizedSourceFormatError
from .topicobj import Topic as Topic
from .topictreetraverser import TopicTreeTraverser as TopicTreeTraverser
from _typeshed import Incomplete
from imp import cache_from_source as cache_from_source
from typing import Any, Sequence, TextIO

class ITopicDefnProvider:
    def getDefn(self, topicNameTuple: Sequence[str]) -> tuple[str, ArgSpecGiven]: ...
    def topicNames(self) -> list[str]: ...
    def getTreeDoc(self) -> str: ...
    def __iter__(self): ...

SPEC_METHOD_NAME: str

class ITopicDefnDeserializer:
    class TopicDefn:
        nameTuple: Incomplete
        description: Incomplete
        argsDocs: Incomplete
        required: Incomplete
        def __init__(self, nameTuple: Sequence[str], description: str, argsDocs: ArgsDocs, required: Sequence[str]) -> None: ...
        def isComplete(self): ...
    def getTreeDoc(self) -> str: ...
    def getNextTopic(self) -> TopicDefn: ...
    def doneIter(self) -> None: ...
    def resetIter(self) -> None: ...

class TopicDefnDeserialClass(ITopicDefnDeserializer):
    def __init__(self, pyClassObj: type = None) -> None: ...
    def getTreeDoc(self) -> str: ...
    def getNextTopic(self) -> ITopicDefnDeserializer.TopicDefn: ...
    def resetIter(self) -> None: ...
    def getDefinedTopics(self) -> list[str]: ...

class TopicDefnDeserialModule(ITopicDefnDeserializer):
    def __init__(self, moduleName: str, searchPath: Sequence[str] = None) -> None: ...
    def getTreeDoc(self) -> str: ...
    def getNextTopic(self) -> ITopicDefnDeserializer.TopicDefn: ...
    def doneIter(self) -> None: ...
    def resetIter(self) -> None: ...
    def getDefinedTopics(self) -> list[str]: ...

class TopicDefnDeserialString(ITopicDefnDeserializer):
    def __init__(self, source: str) -> None: ...
    def getTreeDoc(self) -> str: ...
    def getNextTopic(self) -> ITopicDefnDeserializer.TopicDefn: ...
    def doneIter(self) -> None: ...
    def resetIter(self) -> None: ...
    def getDefinedTopics(self) -> list[str]: ...

TOPIC_TREE_FROM_MODULE: str
TOPIC_TREE_FROM_STRING: str
TOPIC_TREE_FROM_CLASS: str

class TopicDefnProvider(ITopicDefnProvider):
    def __init__(self, source: Any, format: str, **providerKwargs) -> None: ...
    def getDefn(self, topicNameTuple: Sequence[str]) -> tuple[str, ArgSpecGiven]: ...
    def topicNames(self) -> Sequence[str]: ...
    def getTreeDoc(self) -> str: ...
    @classmethod
    def registerTypeForImport(cls, typeName: str, providerClassObj: type): ...
    @classmethod
    def initTypeRegistry(cls) -> None: ...

defaultTopicTreeSpecHeader: str
defaultTopicTreeSpecFooter: str

def exportTopicTreeSpec(moduleName: str = None, rootTopic: Topic | str = None, bak: str = 'bak', moduleDoc: str = None): ...

class TopicTreeSpecPrinter:
    INDENT_CH: str
    def __init__(self, rootTopic: str | Topic = None, fileObj: TextIO = None, width: int = 70, indentStep: int = 4, treeDoc: str = ..., footer: str = ...) -> None: ...
    def getOutput(self) -> str: ...
    def writeAll(self, topicObj: Topic): ...
