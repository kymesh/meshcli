from .callables import UserListener
from .listener import IListenerExcHandler
from .notificationmgr import INotificationHandler
from .topicargspec import ArgSpecGiven
from .topicdefnprovider import ITopicDefnProvider
from .topicexc import TopicDefnError as TopicDefnError, TopicNameError as TopicNameError
from .topicobj import Topic
from _typeshed import Incomplete
from typing import Any, Sequence

__all__ = ['TopicManager', 'TopicNameError', 'TopicDefnError']

class TreeConfig:
    notificationMgr: Incomplete
    listenerExcHandler: Incomplete
    raiseOnTopicUnspecified: bool
    def __init__(self, notificationHandler: INotificationHandler = None, listenerExcHandler: IListenerExcHandler = None) -> None: ...

class TopicManager:
    TOPIC_SPEC_NOT_SPECIFIED: int
    TOPIC_SPEC_ALREADY_CREATED: int
    TOPIC_SPEC_ALREADY_DEFINED: int
    def __init__(self, treeConfig: TreeConfig = None) -> None: ...
    def getRootAllTopics(self) -> Topic: ...
    def addDefnProvider(self, providerOrSource: Any, format=None) -> ITopicDefnProvider: ...
    def clearDefnProviders(self) -> None: ...
    def getNumDefnProviders(self) -> int: ...
    def getTopic(self, name: str, okIfNone: bool = False) -> Topic: ...
    def getOrCreateTopic(self, name: str, protoListener: UserListener = None) -> Topic: ...
    def isTopicInUse(self, name: str) -> bool: ...
    def hasTopicDefinition(self, name: str) -> bool: ...
    def checkAllTopicsHaveMDS(self) -> None: ...
    def delTopic(self, name: str) -> bool: ...
    def getTopicsSubscribed(self, listener: UserListener) -> list[Topic]: ...
    def clearTree(self) -> None: ...

class _MasterTopicDefnProvider:
    def __init__(self, treeConfig: TreeConfig) -> None: ...
    def addProvider(self, provider) -> None: ...
    def clear(self) -> None: ...
    def getNumProviders(self) -> int: ...
    def getDefn(self, topicNameTuple: Sequence[str]) -> tuple[str, ArgSpecGiven]: ...
    def isDefined(self, topicNameTuple: Sequence[str]) -> bool: ...
