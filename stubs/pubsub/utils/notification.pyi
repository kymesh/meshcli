from ..core import INotificationHandler as INotificationHandler, Listener as Listener, Publisher as Publisher, Topic as Topic, TopicManager as TopicManager
from _typeshed import Incomplete
from typing import Mapping, TextIO

class IgnoreNotificationsMixin(INotificationHandler):
    def notifySubscribe(self, pubListener: Listener, topicObj: Topic, newSub: bool): ...
    def notifyUnsubscribe(self, pubListener: Listener, topicObj: Topic): ...
    def notifyDeadListener(self, pubListener: Listener, topicObj: Topic): ...
    def notifySend(self, stage: str, topicObj: Topic, pubListener: Listener = None): ...
    def notifyNewTopic(self, topicObj: Topic, description: str, required: list[str], argsDocs: Mapping[str, str]): ...
    def notifyDelTopic(self, topicName: str): ...

class NotifyByWriteFile(INotificationHandler):
    defaultPrefix: str
    def __init__(self, fileObj: TextIO = None, prefix: str = None) -> None: ...
    def changeFile(self, fileObj) -> None: ...
    def notifySubscribe(self, pubListener: Listener, topicObj: Topic, newSub: bool): ...
    def notifyUnsubscribe(self, pubListener: Listener, topicObj: Topic): ...
    def notifyDeadListener(self, pubListener: Listener, topicObj: Topic): ...
    def notifySend(self, stage: str, topicObj: Topic, pubListener: Listener = None): ...
    def notifyNewTopic(self, topicObj: Topic, description: str, required: list[str], argsDocs: Mapping[str, str]): ...
    def notifyDelTopic(self, topicName: str): ...

class NotifyByPubsubMessage(INotificationHandler):
    topicRoot: str
    topics: Incomplete
    def __init__(self, topicMgr: TopicManager = None) -> None: ...
    def createNotificationTopics(self, topicMgr: TopicManager): ...
    def notifySubscribe(self, pubListener: Listener, topicObj: Topic, newSub: bool): ...
    def notifyUnsubscribe(self, pubListener: Listener, topicObj: Topic): ...
    def notifyDeadListener(self, pubListener: Listener, topicObj: Topic): ...
    def notifySend(self, stage: str, topicObj: Topic, pubListener: Listener = None): ...
    def notifyNewTopic(self, topicObj: Topic, description: str, required: list[str], argsDocs: Mapping[str, str]): ...
    def notifyDelTopic(self, topicName: str): ...

def useNotifyByPubsubMessage(publisher: Publisher = None, all: bool = True, **kwargs): ...
def useNotifyByWriteFile(fileObj: TextIO = None, prefix: str = None, publisher: Publisher = None, all: bool = True, **kwargs): ...
